#### print out cross entropy ####

if i % 5 == 4:  # print every 5 mini-batches                    
    print('[%d, %5d] loss: %.6f' % (epoch + 1, i + 1, loss / (i + 1)))
             
train_loss = loss / len(self.train_dataset_loader)                
print('cross entropy of the network on the traintset: %.6f' % (train_loss))

### save model
def saveModel(self, mfile='model.pth'):
    print('Saving Model ')
    torch.save(self.cnn_model.state_dict(),mfile)

#### Load model from file system
def loadModel(self, mfile='model.pth'):
    self.cnn_model.load_state_dict(torch.load(mfile,map_location=lambda storage, loc: storage))


### Cuda code
self.cuda=False

if (self.cuda)
    self.cnn_model.cuda()

        
if  (self.cuda):
    loss_fn=nn.CrossEntropyLoss().cuda()
else:
    loss_fn = nn.CrossEntropyLoss()



            for i, (images, labels) in enumerate(self.train_dataset_loader):

                if (self.cuda):
                    images, labels = Variable(images.cuda(non_blocking=True)), Variable(labels.cuda(non_blocking=True))
                else:
                    images, labels = Variable(images), Variable(labels)

                optimizer.zero_grad()
                if self.cuda:
                    outputs = self.cnn_model(images).cuda(non_blocking=True)
                else:
                    outputs = self.cnn_model(images)
                outputs = outputs.squeeze()
                loss = loss_fn(outputs, labels)
                loss.backward()
                optimizer.step()
                running_loss += loss.item()

### predict code using cuda
      if (self.cuda):
            test_image_tensor = Variable(test_image_tensor.cuda(non_blocking=True))
            output = self.cnn_model(test_image_tensor).cuda(non_blocking=True)
        else:
            test_image_tensor = test_image_tensor.unsqueeze_(0)
            output = self.cnn_model(test_image_tensor)


